{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","dialogs","dialogsItems","active","messages","message","DialogItem","props","path","id","react_default","a","createElement","className","s","dialog","NavLink","to","name","Message","Textarea1","Element","maxLength10","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","d","Dialogs_DialogItem_DialogItem","messagesElements","messageData","m","Dialogs_Message_Message","React","createRef","values","addMessageCreator","newMessageBody","mapStateToProps","mapDispatchToProps","dispatch","addMessageActionCreator","compose","connect","withAuthRedirect"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,OAAA,wBAAAC,SAAA,0BAAAC,QAAA,kHCWHC,EARI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEX,QACtCO,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASC,GAAIT,GAAOD,EAAMW,QCCnBC,EANC,SAACZ,GACb,OAAQG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEC,QACzBR,EAAMF,mDC+BLe,EAAYC,YAAQ,YACtBC,EAAcC,YAAiB,IAS7BC,EAAsBC,YAAU,CAClCC,KAAK,wBADmBD,CAPL,SAAClB,GACpB,OAAQG,EAAAC,EAAAC,cAAA,QAAMe,SAAUpB,EAAMqB,cAClBlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,UAAWV,EAAWF,KAAM,iBAAmBa,YAAa,qBAAqBC,SAAU,CAACC,IAAUX,KAC7GZ,EAAAC,EAAAC,cAAA,yBASDsB,EA3CC,SAAC3B,GACb,IAAI4B,EAAQ5B,EAAM6B,YACdC,EAAkBF,EAAMG,YAAYC,IAAK,SAAAC,GAAC,OAAI9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAYvB,KAAMsB,EAAEtB,KAAMT,GAAI+B,EAAE/B,OAC9EiC,EAAmBP,EAAMQ,YAAYJ,IAAK,SAAAK,GAAC,OAAIlC,EAAAC,EAAAC,cAACiC,EAAD,CAASxC,QAASuC,EAAEvC,YAE/CyC,IAAMC,YAM9B,OACIrC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEb,SACdS,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEZ,cACZmC,GAEN3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEV,UACdM,EAAAC,EAAAC,cAAA,eAAQ8B,EAAR,KACAhC,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAACY,EAAD,CAAqBG,SAZhB,SAACqB,GACnBzC,EAAM0C,kBAAkBD,EAAOE,sDC6BnCC,EAAgB,SAAChB,GAEjB,MAAO,CACHC,YAAaD,EAAMC,cAGvBgB,EAAmB,SAACC,GAEpB,MAAO,CACHJ,kBAAmB,SAACC,GAAkBG,EAASC,YAAwBJ,OAM/EK,YACIC,YAAQL,EAAgBC,GACxBK,IAFJF,CAGErB,GAMaqB,sBACXC,YAAQL,EAAgBC,GACxBK,IAFWF,CAGbrB","file":"static/js/1.7631d002.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__Fa2B-\",\"dialogsItems\":\"Dialogs_dialogsItems__2GC28\",\"active\":\"Dialogs_active__fnzqg\",\"messages\":\"Dialogs_messages__1BWsC\",\"message\":\"Dialogs_message__3Ea32\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (<div className={s.dialog}> \r\n    {props.message} \r\n    </div>)\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm } from 'redux-form'\r\nimport { Textarea, Element} from '../common/FormsControls/formsControls';\r\nimport { maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElements = state.dialogsData.map( d => <DialogItem name={d.name} id={d.id} />  );\r\n    let messagesElements = state.messageData.map( m => <Message message={m.message}/> );\r\n\r\n    let newMessageElement = React.createRef();\r\n    \r\n    const addNewMessage = (values)=>{\r\n        props.addMessageCreator(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div> { messagesElements } </div>\r\n                <div>\r\n                     <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\nconst Textarea1 = Element(\"textarea\")\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddMessageForm = (props) =>{\r\n    return  <form onSubmit={props.handleSubmit}>\r\n                <Field component={Textarea1} name={\"newMessageBody\"}  placeholder ='Enter your message' validate={[required, maxLength10]}/>\r\n                <button >send</button>\r\n            </form>\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm({\r\n    form:'dialogAddMessageForm'\r\n})(AddMessageForm) \r\n\r\n\r\nexport default Dialogs; ","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { addMessageActionCreator, } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport StoreContext from '../../StoreContext';\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router';\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n    \r\n\r\n//     //let dialogsElements = props.state.dialogsData.map( d => <DialogItem name={d.name} id={d.id} />  );\r\n//     //let messagesElements = props.state.messageData.map( m => <Message message={m.message}/> );\r\n\r\n//     //let newMessageElement = React.createRef();\r\n    \r\n\r\n//     return <StoreContext.Consumer> \r\n//         { \r\n//         (store)=>{ \r\n//     let state = store.getState().dialogsPage;\r\n//     let onMessageChange = (text) =>\r\n//     {\r\n//         //let text = newMessageElement.current.value;\r\n//         store.dispatch(updateNewMessageTextActionCreator(text));\r\n        \r\n//     }\r\n\r\n//     let addMessage = (text) => \r\n//     {\r\n//      store.dispatch(addMessageActionCreator(text));\r\n        \r\n//     }\r\n\r\n//         return <Dialogs addMessageCreator ={addMessage} sendMessage = {onMessageChange} dialogsPage={state} />\r\n//         }\r\n//      }\r\n//     </StoreContext.Consumer>\r\n// }\r\n\r\nlet mapStateToProps=(state)=>\r\n{\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps=(dispatch)=>\r\n{\r\n    return {\r\n        addMessageCreator: (newMessageBody)=>{dispatch(addMessageActionCreator(newMessageBody));},\r\n        //sendMessage: (text)=>{ dispatch(updateNewMessageTextActionCreator(text));},\r\n        \r\n    }\r\n}\r\n\r\ncompose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect \r\n)(Dialogs)\r\n\r\n// let AuthRedirectComponent=withAuthRedirect(Dialogs)\r\n\r\n// const DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect \r\n)(Dialogs);"],"sourceRoot":""}